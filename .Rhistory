nsims<-100000
X<-rbinom(n=nsims,size=N,prob=p0)
# Find posterior probabilities
post.prob<-pbeta(p0,shape1=X+1,shape2=N-X+1,lower.tail=F)
# Find Type I error
c<-seq(.9,.999,.001)
errors <- lapply(c,FUN = function(X){
df <- data.frame(
c = X,
alpha = mean(post.prob>X) |> unlist()
)
return(df)
})
errors[errors<.05]
errors
errors <- lapply(c,FUN = function(X){
df <- data.frame(
c = X,
alpha = mean(post.prob>X) |> unlist()
)
return(df)
}) |> do.call("rbind")
errors <-   do.call("rbind", errors)
errors[errors$alpha<.05]
errors[errors$alpha<.05,]
library(tidyverse)
# Trial Setting
N<-40
p0<-0.30
p1<-0.50
# Generate data
nsims<-100000
X<-rbinom(n=nsims,size=N,prob=p0)
# Find posterior probabilities
post.prob<-pbeta(p0,shape1=X+1,shape2=N-X+1,lower.tail=F)
# Find Type I error
c<-seq(.9,.999,.001)
errors <- lapply(c,FUN = function(X){
df <- data.frame(
c = X,
alpha = mean(post.prob>X) |> unlist()
)
return(df)
})
errors <-   do.call("rbind", errors)
errors[errors$alpha<.05,] |> arrange(des(alpha))
errors |> dplyr::filter(alpha<.05) |> arrange(des(alpha))
errors |> dplyr::filter(alpha<.05) |> arrange(desc(alpha))
errors
# Find Type I error
c<-seq(.8,1,.01)
errors <- lapply(c,FUN = function(X){
df <- data.frame(
c = X,
alpha = mean(post.prob>X) |> unlist()
)
return(df)
})
errors <-   do.call("rbind", errors)
errors |> dplyr::filter(alpha<.05) |> arrange(desc(alpha))
errors |> dplyr::filter(alpha<=.05) |> arrange(desc(alpha))
# Find Type I error
c<-seq(.5,1,.01)
errors <- lapply(c,FUN = function(X){
df <- data.frame(
c = X,
alpha = mean(post.prob>X) |> unlist()
)
return(df)
})
errors <-   do.call("rbind", errors)
errors |> dplyr::filter(alpha<=.05) |> arrange(desc(alpha))
errors
# Trial Setting
N <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e6
X <- rbinom(n = nsims, size = N, prob = p0)
# Find posterior probabilities
post.prob <- pbeta(p0,
shape1 = X + 1,
shape2 = N - X + 1,
lower.tail = F)
# Find Type I error
c <- seq(.9, 1, .01)
errors <- lapply(
c,
FUN = function(X) {
df <- data.frame(c = X, alpha = mean(post.prob > X) |> unlist())
return(df)
}
)
errors <-   do.call("rbind", errors)
errors |> dplyr::filter(alpha <= .05) |> arrange(desc(alpha))
# Find Type I error
c <- seq(.9, 1, .001)
errors <- lapply(
c,
FUN = function(X) {
df <- data.frame(c = X, alpha = mean(post.prob > X) |> unlist())
return(df)
}
)
errors <-   do.call("rbind", errors)
errors |> dplyr::filter(alpha <= .05) |> arrange(desc(alpha))
# Trial Setting
N <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e7
X <- rbinom(n = nsims, size = N, prob = p0)
# Find posterior probabilities
post.prob <- pbeta(p0,
shape1 = X + 1,
shape2 = N - X + 1,
lower.tail = F)
# Find Type I error
c <- seq(.9, 1, .001)
errors <- lapply(
c,
FUN = function(X) {
df <- data.frame(c = X, alpha = mean(post.prob > X) |> unlist())
return(df)
}
)
errors <-   do.call("rbind", errors)
errors |> dplyr::filter(alpha <= .05) |> arrange(desc(alpha))
# Trial Setting
N <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e7
X <- rbinom(n = nsims, size = N, prob = p0)
# Find posterior probabilities
post.prob <- pbeta(p0,
shape1 = X + 1,
shape2 = N - X + 1,
lower.tail = F)
# Find Type I error
c <- seq(.9, 1, .01)
errors <- lapply(
c,
FUN = function(X) {
df <- data.frame(c = X, alpha = mean(post.prob > X) |> unlist())
return(df)
}
)
errors <-   do.call("rbind", errors)
errors |> dplyr::filter(alpha <= .05) |> arrange(desc(alpha))
# Trial Setting
N <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e7
X <- rbinom(n = nsims, size = N, prob = p0)
# Find posterior probabilities
post.prob <- pbeta(p0,
shape1 = X + 1,
shape2 = N - X + 1,
lower.tail = F)
# Find Type I error
c <- seq(.9, 1, .001)
errors <- lapply(
c,
FUN = function(X) {
df <- data.frame(c = X, alpha = mean(post.prob > X) |> unlist())
return(df)
}
)
errors <-   do.call("rbind", errors)
errors |> dplyr::filter(alpha <= .05) |> arrange(desc(alpha))
criterion <- errors |> dplyr::filter(alpha <= .05) |> arrange(desc(alpha)) |> pull(c)[1]
criterion <- errors |> dplyr::filter(alpha <= .05) |> arrange(desc(alpha)) |> pull(c) |> .[1]
criterion <- errors |> dplyr::filter(alpha <= .05) |> arrange(desc(alpha)) |> pull(c) |> (\(.).[1])
criterion <- errors |> dplyr::filter(alpha <= .05) |> arrange(desc(alpha)) |> pull(c) %>% .[1]
# Trial Setting
N1 <- 20
N2 <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e5
X <- rbinom(n = nsims, size = N, prob = p0)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X + 1,
shape2 = N1 - X + 1,
lower.tail = F)
post.prob1 <- pbeta(p0,
shape1 = X + 1,
shape2 = N2 - X + 1,
lower.tail = F)
mean(post.prob1 > criterion) |> unlist()
mean(post.prob2 > criterion) |> unlist()
# Trial Setting
N1 <- 20
N2 <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e5
X <- rbinom(n = nsims, size = N, prob = p0)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X + 1,
shape2 = N1 - X + 1,
lower.tail = F)
post.prob2 <- pbeta(p0,
shape1 = X + 1,
shape2 = N2 - X + 1,
lower.tail = F)
mean(post.prob1 > criterion) |> unlist()
mean(post.prob2 > criterion) |> unlist()
# Trial Setting
N1 <- 20
N2 <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e5
X <- rbinom(n = nsims, size = N, prob = p0)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X + 1,
shape2 = N1 - X + 1,
lower.tail = F)
post.prob2 <- pbeta(p0,
shape1 = X + 1,
shape2 = N2 - X + 1,
lower.tail = F)
mean(post.prob1 > criterion) |> unlist()
mean(post.prob2 > criterion) |> unlist()
mean(post.prob1 > criterion, na.rm = T) |> unlist()
mean(post.prob2 > criterion) |> unlist()
# Trial Setting
N1 <- 20
N2 <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e5
X <- rbinom(n = nsims, size = N, prob = p0)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X + 1,
shape2 = N1 - X + 1,
lower.tail = F)
post.prob2 <- pbeta(p0,
shape1 = X + 1,
shape2 = N2 - X + 1,
lower.tail = F)
mean(post.prob1 > criterion, na.rm = T) |> unlist()
mean(post.prob2 > criterion) |> unlist()
# Trial Setting
N1 <- 20
N2 <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e7
X <- rbinom(n = nsims, size = N, prob = p0)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X + 1,
shape2 = N1 - X + 1,
lower.tail = F)
post.prob2 <- pbeta(p0,
shape1 = X + 1,
shape2 = N2 - X + 1,
lower.tail = F)
mean(post.prob1 > criterion, na.rm = T) |> unlist()
mean(post.prob2 > criterion) |> unlist()
criterion
# Trial Setting
N1 <- 20
N2 <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e7
X <- rbinom(n = nsims, size = N, prob = p0)
# Find posterior probabilities
post.prob1 <- pbeta(p1,
shape1 = X + 1,
shape2 = N1 - X + 1,
lower.tail = F)
post.prob2 <- pbeta(p1,
shape1 = X + 1,
shape2 = N2 - X + 1,
lower.tail = F)
mean(post.prob1 > criterion, na.rm = T) |> unlist()
mean(post.prob2 > criterion) |> unlist()
mean(post.prob1 > criterion |post.prob2 > criterion, na.rm = T) |> unlist()
mean(post.prob1 > criterion | post.prob2 > criterion, na.rm = T)
# Trial Setting
N1 <- 20
N2 <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e7
X1 <- rbinom(n = nsims, size = N1, prob = p1)
X2 <- rbinom(n = nsims, size = N2, prob = p1)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X + 1,
shape2 = N1 - X + 1,
lower.tail = F)
post.prob2 <- pbeta(p0,
shape1 = X + 1,
shape2 = N2 - X + 1,
lower.tail = F)
mean(post.prob1 > criterion | post.prob2 > criterion, na.rm = T)
# Trial Setting
N1 <- 20
N2 <- 40
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e7
X1 <- rbinom(n = nsims, size = N1, prob = p1)
X2 <- rbinom(n = nsims, size = N2, prob = p1)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X1 + 1,
shape2 = N1 - X1 + 1,
lower.tail = F)
post.prob2 <- pbeta(p0,
shape1 = X2 + 1,
shape2 = N2 - X2 + 1,
lower.tail = F)
mean(post.prob1 > criterion | post.prob2 > criterion, na.rm = T)
# Trial Setting
N1 <- 20
N2 <- 20
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e7
X1 <- rbinom(n = nsims, size = N1, prob = p1)
X2 <- rbinom(n = nsims, size = N2, prob = p1)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X1 + 1,
shape2 = N1 - X1 + 1,
lower.tail = F)
post.prob2 <- pbeta(p0,
shape1 = X1 + X2 + 1,
shape2 = N2 - X1 - X2 + 1,
lower.tail = F)
mean(post.prob1 > criterion | post.prob2 > criterion, na.rm = T)
# Trial Setting
N1 <- 20
N2 <- 20
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e7
X1 <- rbinom(n = nsims, size = N1, prob = p1)
X2 <- rbinom(n = nsims, size = N2, prob = p1)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X1 + 1,
shape2 = N1 - X1 + 1,
lower.tail = F)
post.prob2 <- pbeta(p0,
shape1 = X1 + X2 + 1,
shape2 = N1 + N2 - X1 - X2 + 1,
lower.tail = F)
mean(post.prob1 > criterion | post.prob2 > criterion, na.rm = T)
# Trial Setting
N1 <- 20
N2 <- 20
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e6
X1 <- rbinom(n = nsims, size = N1, prob = p0)
X2 <- rbinom(n = nsims, size = N2, prob = p0)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X1 + 1,
shape2 = N1 - X1 + 1,
lower.tail = F)
post.prob2 <- pbeta(p0,
shape1 = X1 + X2 + 1,
shape2 = N1 + N2 - X1 - X2 + 1,
lower.tail = F)
mean(post.prob1 > criterion | post.prob2 > criterion, na.rm = T)
# Trial Setting
N1 <- 20
N2 <- 20
p0 <- 0.30
p1 <- 0.50
# Generate data
nsims <- 1e7
X1 <- rbinom(n = nsims, size = N1, prob = p0)
X2 <- rbinom(n = nsims, size = N2, prob = p0)
# Find posterior probabilities
post.prob1 <- pbeta(p0,
shape1 = X1 + 1,
shape2 = N1 - X1 + 1,
lower.tail = F)
post.prob2 <- pbeta(p0,
shape1 = X1 + X2 + 1,
shape2 = N1 + N2 - X1 - X2 + 1,
lower.tail = F)
mean(post.prob1 > criterion | post.prob2 > criterion, na.rm = T)
#-------------------------------------------------------------------------#
#               Analysing the BRAF-V600 basket trial                      #
#-------------------------------------------------------------------------#
# please modify the working directory to locate the folder on your PC
# where you have saved your JAGS model scripts
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
set.seed(684324)
library(rjags)
#---------------- Approach 1: Standard hierarchical modelling ----------------#
data_list <- list(
nMod = 6,
r = c(8, 1, 6, 0, 2, 6),
n = c(20, 8, 18, 10, 7, 32),
Prior.mu.theta = c(0, 10),
Prior.tau.HN = 0.125,
p.cut = 0.25
)
inits <- list(
mu.theta = 0
)
iter <- 10000
jags <- jags.model(file = "StandardHM.txt", data = data_list,
n.chains = 1,  n.adapt = iter)
update(jags, iter, progress.bar = "none")
mcmc.sampling <- jags.samples(jags, c("p", "success"), iter, progress.bar = "none")
samples.p <- mcmc.sampling$p[1,,]    # change the value in the bracket from 1 to K
samples.success <- mcmc.sampling$success[1,,]
mean(samples.p); sd(samples.p)
mean(samples.success)
#Or alternatively
posterior_sample <- coda.samples(jags, data = data_list,
n.chains = 1,  variable.names = c("p", "success"), n.iter = iter)
summary(posterior_sample)
#-------------------- Approach 2: EXNEX --------------------#
data_list <- list(
nMod = 6,
r = c(8, 1, 6, 0, 2, 6),
n = c(20, 8, 18, 10, 7, 32),
Prior.mu.theta = c(0, 10),
Prior.tau.HN = 0.5,
p.cut = 0.125,
pMix = c(0.5, 0.5),
nex.theta = 0,
nex.sig = 10
)
inits <- list(mu.theta = 0)
iter <- 10000
jags <- jags.model(
file = "EXNEX.txt",
data = data_list,
n.chains = 1,
n.adapt = iter
)
update(jags, iter, progress.bar = "none")
mcmc.sampling <- jags.samples(jags, c("p", "success"), iter, progress.bar = "none")
samples.p <- mcmc.sampling$p[1, , ]# change the value in the bracket from 1 to K
samples.success <- mcmc.sampling$success[1, , ]
mean(samples.p)
sd(samples.p)
mean(samples.success)
#-------------------- Approach 3: Stand-alone analysis --------------------#
data_list <- list(
nMod = 6,
r = c(8, 1, 6, 0, 2, 6),
n = c(20, 8, 18, 10, 7, 32),
nex.theta = 0,
nex.sig = 10,
p.cut = 0.25
)
inits <- list(theta = rep(0, 6))
iter <- 10000
jags <- jags.model(
file = "Stand-alone.txt",
data = data_list,
n.chains = 1,
n.adapt = iter
)
update(jags, iter, progress.bar = "none")
mcmc.sampling <- jags.samples(jags, c("p", "success"), iter, progress.bar = "none")
samples.p <- mcmc.sampling$p[1, , ]# change the value in the bracket from 1 to K
samples.success <- mcmc.sampling$success[1, , ]
mean(samples.p)
sd(samples.p)
mean(samples.success)
# Alternatively
mcmc.sampling0 <- coda.samples(
jags,
data = data_list,
n.chains = 1,
variable.names = c("p", "success"),
n.iter = 1e4
)
mcmc_stats0 <- summary(mcmc.sampling0)
mcmc_stats0$statistics[1:6, 1]
install.packages("bmabasket’")
mcmc_stats0$statistics[1:6, 1]
install.packages("bmabasket")
bmabasket::bma(n = data_list$n, y = data_list$r, pi0 = data_list$p.cut)
5*2.88
